package gate

import (
	"fmt"
	"github.com/glide-im/glide/pkg/messages"
	"strconv"
	"strings"
)

// ID is used to identify the client, the ID is consist of multiple parts, some of them are optional.
// The ID is constructed by concatenating the parts with a '_' separator, and the parts are:
//	- The gateway id (optional): the string id of the gateway that the client is connected to.
//	- The client id (required): the int64 or string id  of the client, it is unique for each client.
//		- if the client is temporary, this id is a string generated by the gateway, otherwise it is an int64.
//	- The client type (optional): the int type of the client, like 'web', 'mobile', 'desktop', etc.
type ID string

// NewID2 creates a new ID from the given user id, use the empty gateway id and the empty client type.
func NewID2(uid interface{}) ID {
	return ID(fmt.Sprintf("_%v_", uid))
}

// NewID creates a new ID from the given user id, gateway id and client type.
func NewID(gate string, uid interface{}, device string) ID {
	id := fmt.Sprintf("%s_%v_%s", gate, uid, device)
	return ID(id)
}

// Device returns the device type of the client, if the client device type is not set, it returns -1.
func (i *ID) Device() int64 {
	return i.getPartInt(2)
}

// UID returns the user id of the client, if the client is temporary, it returns -1.
func (i *ID) UID() int64 {
	return i.getPartInt(1)
}

// Gateway returns the gateway id of the client, if not set, it returns an empty string.
func (i *ID) Gateway() string {
	return i.getPart(0)
}

// IsTemp returns true if the ID is a temporary.
func (i *ID) IsTemp() bool {
	return i.getPartInt(1) <= 0
}

func (i *ID) getPartInt(index int) int64 {
	s := i.getPart(index)
	id, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return -1
	}
	return id
}

func (i *ID) getPart(index int) string {
	s := strings.Split(string(*i), "_")
	if index >= len(s) {
		return ""
	}
	return s[index]
}

// Info represents a client's information.
type Info struct {

	// ID is the unique identifier for the client.
	ID ID

	// AliveAt is the time the client was last seen.
	AliveAt int64

	// ConnectionAt is the time the client was connected.
	ConnectionAt int64

	// Gateway is the name of the gateway the client is connected to.
	Gateway string

	// CliAddr is the address of the client.
	CliAddr string
}

// Client is a client connection abstraction.
type Client interface {

	// SetID sets the ID of the client.
	SetID(id ID)

	// IsRunning returns true if the client is running/alive.
	IsRunning() bool

	// EnqueueMessage enqueues a message to be sent to the client.
	EnqueueMessage(message *messages.GlideMessage) error

	// Exit the client and close the connection.
	Exit()

	// Run starts the client message handling loop and blocks until the client.
	Run()

	// GetInfo returns the client's information.
	GetInfo() Info

	// Logged returns true if the client is logged in.
	Logged() bool
}
